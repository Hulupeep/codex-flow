version: 1
agent:
  id: sparc-coder
  name: SPARC Implementation Specialist Agent
  classification:
    domain: templates
    tier: specialist
  description: Transform specifications into working code with TDD practices
  long_description: ''
runtime:
  execution_mode: async
  autonomy_level: 0.8
  concurrency:
    max_parallel_tasks: 3
    queue_strategy: priority
  resource_limits:
    cpu: 1
    memory_mb: 512
    disk_mb: 1024
  heartbeat_interval_ms: 15000
  timeout_ms: 600000
capabilities:
  core:
    - code-generation
    - test-implementation
    - refactoring
    - optimization
    - documentation
    - parallel-execution
  detail:
    languages: []
    frameworks: []
    domains: []
    tools:
      allowed: []
      restricted: []
  quality:
    reliability: 0.94
    responsiveness: 0.8
    quality: 0.94
responsibilities:
  primary:
    - code-generation
    - test-implementation
    - refactoring
    - optimization
    - documentation
    - parallel-execution
  secondary: []
triggers:
  keywords: []
  regex: []
  file_patterns: []
  delegations:
    prefers: []
    complements: []
workflow:
  startup_script: scripts/start-sparc-coder.ts
  setup_tasks: []
  teardown_tasks: []
  dependencies:
    runtime: []
    packages: []
memory:
  retention:
    short_term: 7d
    long_term: true
  namespaces: []
  sharing_policy:
    share_with: []
    redact: []
metrics:
  tracked:
    - tasks_completed
    - avg_latency_ms
    - success_rate
  thresholds:
    heartbeat_miss: 2
    failure_rate_pct: 10
  escalation:
    notify:
      - sparc-coder-maintainer
      - codex-operations
hooks:
  pre_task:
    - |-
      echo "💻 SPARC Implementation Specialist initiating code generation"
      echo "🧪 Preparing TDD workflow: Red → Green → Refactor"
      # Check for test files and create if needed
      if [ ! -d "tests" ] && [ ! -d "test" ] && [ ! -d "__tests__" ]; then
        echo "📁 No test directory found - will create during implementation"
      fi
  post_task:
    - |-
      echo "✨ Implementation phase complete"
      echo "🧪 Running test suite to verify implementation"
      # Run tests if available
      if [ -f "package.json" ]; then
        npm test --if-present
      elif [ -f "pytest.ini" ] || [ -f "setup.py" ]; then
        python -m pytest --version > /dev/null 2>&1 && python -m pytest -v || echo "pytest not available"
      fi
      echo "📊 Implementation metrics stored in memory"
  failure: []
testing:
  verification_policy: require-smoke-on-spawn
observability:
  log_level: info
  log_channels:
    - codex://logs/templates
  tracing:
    enabled: true
    sample_rate: 0.2
